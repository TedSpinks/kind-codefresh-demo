# To install this private step into your Codefresh account (your yq version should be 4+):
# codefresh auth get-contexts
# CF_ACCOUNT=your-account-name
# STEP=$CF_ACCOUNT/kind yq eval '.metadata.name = env(STEP)' -i step.yaml
# codefresh create step-type -f step.yaml

kind: step-type
version: '1.0'
metadata:
  name: your-account-name/kind
  version: 0.0.1
  isPublic: false
  description: Run a kind (Kubernetes-in-Docker) pod in your Kubernetes cluster. Perfect for creating/deleting an ephemeral kind cluster within a pipeline, for testing.
  sources:
    - https://github.com/TedSpinks/kind-demo
    - https://d2iq.com/blog/running-kind-inside-a-kubernetes-cluster-for-continuous-integration
    - https://github.com/jieyu/docker-images/tree/master/dind
  stage: incubating
  maintainers:
    - name: Ted Spinks
      email: ted.spinks@codefresh.io
  categories:
    - deployment
  official: false
  tags: []
  icon:
    type: image
    size:
      large:
        url: >-
          https://d33wubrfki0l68.cloudfront.net/d0c94836ab5b896f29728f3c4798054539303799/9f948/logo/logo.png
  examples:
    - description: publish-build
      workflow:
        hooks:
          on_finish:
            # Cleanup kind pod and service, these vars must exist when the build starts
            exec:
              image: codefresh/kubectl
              environment:
                - KIND_POD_CONTEXT=${{KIND_POD_CONTEXT}}
                - KIND_POD_NS=${{KIND_POD_NS}}
                - CF_BUILD_ID=${{CF_BUILD_ID}}
              commands:
                - kubectl config use-context $KIND_POD_CONTEXT
                - kubectl config set-context --current --namespace=$KIND_POD_NS
                - kubectl delete all -l app=kind-cluster-$CF_BUILD_ID
        steps:
          create_kind_cluster:
            title: Create kind cluster
            type: ${{CF_ACCOUNT}}/kind
            arguments:
              KIND_POD_CONTEXT: ${{KIND_POD_CONTEXT}}
              KIND_POD_NS: ${{KIND_POD_NS}}
          test_kind:
            title: Deploy a test pod to kind
            image: codefresh/kubectl
            commands:
              - echo "Changing to the context where the kind pod is running..."
              - kubectl config use-context $KIND_POD_CONTEXT
              - echo "Loading an image into the kind cluster..."
              - kubectl -n $KIND_POD_NS exec $KIND_POD_NAME -- docker pull k8s.gcr.io/echoserver:1.4
              - kubectl -n $KIND_POD_NS exec $KIND_POD_NAME -- kind load docker-image k8s.gcr.io/echoserver:1.4
              - echo "Changing to the context of the kind cluster and running some tests..."
              - kubectl config use-context $KIND_CLUSTER_CONTEXT
              - kubectl get node
              - kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
              - kubectl wait --for=condition=ready pod -l app=hello-node --timeout=10s
              - kubectl get pod
spec:
  arguments: |-
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": true,
      "patterns": [],
      "required": [
        "KIND_POD_CONTEXT",
        "KIND_POD_NS"
      ],
      "properties": {
        "KIND_POD_CONTEXT": {
          "type": "string",
          "description": "Name of the Kubernetes Integreation where the kind pod should be deployed."
        },
        "KIND_POD_NS": {
          "type": "string",
          "description": "The namespace where the kind pod will be deployed. It will be created if it doesn't already exist."
        },
        "KIND_TIMEOUT": {
          "TYPE": "integer",
          "description": "How many seconds to wait for the kind cluster to start up. Default is 180.",
          "default": 180
        }
      }
    }
  steps:

    verify_create_namespace:
      title: Verify or create namespace
      stage: build
      image: codefresh/kubectl
      environment:
        - KIND_POD_CONTEXT=${{KIND_POD_CONTEXT}}
        - KIND_POD_NS=${{KIND_POD_NS}}
      commands:
        - env
        - kubectl config use-context $KIND_POD_CONTEXT
        - kubectl create ns $KIND_POD_NS | true
        - kubectl get ns $KIND_POD_NS

    deploy_pod:
      # Name of the resuling pod and service is ${{KIND_POD_NAME}}
      title: Deploy kind pod and service to K8s
      stage: build
      image: codefresh/cf-deploy-kubernetes:16.1.4
      working_directory: '${{main_clone}}'
      environment:
        # KUBECONTEXT and KUBERNETES_NAMESPACE are expected by the cf-deploy-kubernetes script
        - KUBECONTEXT=${{KIND_POD_CONTEXT}}
        - KUBERNETES_NAMESPACE=${{KIND_POD_NS}}
        - KIND_TIMEOUT=${{KIND_TIMEOUT}}
      commands:
        # Deploy pod
        - wget https://raw.githubusercontent.com/TedSpinks/kind-demo/main/kind-pod.yaml -O /tmp/kind-pod.yaml
        - /cf-deploy-kubernetes /tmp/kind-pod.yaml
        - export KIND_POD_NAME=kind-cluster-${{CF_BUILD_ID}}
        # Deploy service - I used nodeport because its always unique
        - kubectl -n $KUBERNETES_NAMESPACE expose pod $KIND_POD_NAME --port 30001 --type NodePort
        # Export pipeline vars
        - cf_export KIND_POD_NAME
        - cf_export KIND_HOST_IP=$(kubectl -n $KUBERNETES_NAMESPACE get po $KIND_POD_NAME -o jsonpath='{ $.status.hostIP }')
        - cf_export KIND_NODEPORT=$(kubectl -n $KUBERNETES_NAMESPACE get svc $KIND_POD_NAME -o jsonpath='{ $.spec.ports[0].nodePort }')
        # Wait for kind to start
        - kubectl -n $KUBERNETES_NAMESPACE wait --for=condition=ready pod -l app=$KIND_POD_NAME --timeout=${KIND_TIMEOUT}s && export status=$? || export status=$?
        - kubectl -n $KUBERNETES_NAMESPACE logs $KIND_POD_NAME
        - if [ "$status" != "0" ]; then echo "Timed out waiting for kind pod to start"; exit 1; fi

    update_kube_config:
      title: Add kind to kubeconfig
      stage: build
      image: codefresh/kubectl
      environment:
        - KIND_POD_CONTEXT=${{KIND_POD_CONTEXT}}
        - KIND_POD_NS=${{KIND_POD_NS}}
        - KIND_POD_NAME=${{KIND_POD_NAME}}
        - KIND_HOST_IP=${{KIND_HOST_IP}}
        - KIND_NODEPORT=${{KIND_NODEPORT}}
      commands:
        - kubectl config use-context $KIND_POD_CONTEXT
        # Get kube config from within kind pod
        - kubectl -n $KIND_POD_NS exec $KIND_POD_NAME -- cat /root/.kube/config > /tmp/temp-kc.yaml
        # Merge kind kube config with pipeline kube config (yq v3 syntax is nicer than v4!)
        - wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O /usr/bin/yq
        - chmod +x /usr/bin/yq
        - yq merge --arrays append --inplace $KUBECONFIG /tmp/temp-kc.yaml
        # Update merged kube config to use the nodeport service
        - kubectl config set-cluster kind-kind --server=https://$KIND_HOST_IP:$KIND_NODEPORT --insecure-skip-tls-verify=true
        # Record context for deploying to the kind cluster
        - cf_export KIND_CLUSTER_CONTEXT=kind-kind # default context name for kind

  returns: |-
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": true,
      "patterns": [],
      "required": [
        "KIND_CLUSTER_CONTEXT",
        "KIND_POD_NAME",
        "KIND_HOST_IP",
        "KIND_NODEPORT"
      ],
      "properties": {
        "KIND_CLUSTER_CONTEXT": {
          "type": "string",
          "description": "Name of the context that was added to kubeconfig for connecting to the kind cluster."
        },
        "KIND_POD_NAME": {
          "type": "string",
          "description": "Name of the pod in which the kind cluster lives. 'docker exec' to this pod to use the kind command."
        },
        "KIND_HOST_IP": {
          "type": "string",
          "description": "IP address on which the kind cluster's API service is published."
        },
        "KIND_NODEPORT": {
          "type": "string",
          "description": "Port on which the kind cluster's API service is published."
        }
      }
    }
